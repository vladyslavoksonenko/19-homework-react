{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","isStart","setStart","timeMilliseconds","millisecond","setMillisecond","second","setSecond","minute","setMinute","setTime","width","setWidth","textButton","useEffect","setTimeout","step","Math","trunc","onTimeEnd","onTimeStart","autostart","className","onClick","style","App","onTick","time","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA0DeA,EAtDD,SAACC,GAAW,IAAD,EAEKC,oBAAS,GAFd,mBAEhBC,EAFgB,KAEPC,EAFO,OAGeF,mBAASD,EAAMI,kBAH9B,mBAGhBC,EAHgB,KAGHC,EAHG,OAIKL,mBAAS,GAJd,mBAIhBM,EAJgB,KAIRC,EAJQ,OAKKP,mBAAS,GALd,mBAKhBQ,EALgB,KAKRC,EALQ,OAMCT,mBAAS,GANV,mBAMVU,GANU,aAOGV,mBAAS,KAPZ,mBAOhBW,EAPgB,KAOTC,EAPS,KASnBC,EAAcZ,EAAoB,QAAV,QAkC5B,OA/BAa,qBAAU,WACJb,GACFc,YAAW,WACTL,EAAQF,EAAS,IAAMF,GACvBD,EAAeD,EAAcL,EAAMiB,MACnCT,EAAUU,KAAKC,MAAOd,EAAc,IAAQ,KAC5CK,EAAUQ,KAAKC,MAAOd,EAAc,IAAQ,KAC5CQ,EAAuB,IAAdR,EAAoBL,EAAMI,kBAE/BC,EAAc,MAChBL,EAAMoB,YACNd,EAAeN,EAAMI,kBACrBD,GAAS,MAEVH,EAAMiB,QAEV,CAACf,EAASG,EAAaL,EAAMqB,YAAaZ,EAAQF,IAErDQ,qBAAU,WACJf,EAAMsB,WACRnB,GAAUD,KAEX,IAEHa,qBAAU,WACJb,GACFF,EAAMqB,gBAEP,CAACnB,IAIF,qBAAKqB,UAAU,QAAf,SACE,sBAAKA,UAAU,QAAf,UACE,yCAAYd,EAAS,IAAMF,KAC3B,wBAAQgB,UAAU,eAAeC,QAAS,kBAAMrB,GAAUD,IAA1D,SAAqEY,IACrE,qBAAKS,UAAU,OAAOE,MAAO,CAACb,OAASA,EAAQ,a,MCxCxCc,MATf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,cAAC,EAAD,CAAOnB,iBAAkB,IAAMkB,WAAW,EAAOL,KAAM,IAAMU,OAAQ,SAACC,GAAD,OAAUC,QAAQC,IAAI,0FAAsBF,IAAQR,UAAW,kBAAMS,QAAQC,IAAI,6DAAgBT,YAAa,kBAAMQ,QAAQC,IAAI,6FACrM,cAAC,EAAD,CAAO1B,iBAAkB,IAAQkB,WAAW,EAAML,KAAM,IAAMU,OAAQ,SAACC,GAAD,OAAUC,QAAQC,IAAI,0FAAsBF,IAAOR,UAAW,kBAAMS,QAAQC,IAAI,6DAAgBT,YAAa,kBAAMQ,QAAQC,IAAI,iGCK5LC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.23b522c3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\n\nconst Timer = (props) => {\n\n  const [isStart, setStart] = useState(false);\n  const [millisecond, setMillisecond] = useState(props.timeMilliseconds);\n  const [second, setSecond] = useState(0);\n  const [minute, setMinute] = useState(0);\n  const [time, setTime] = useState(0);\n  const [width, setWidth] = useState(100)\n\n  let textButton = !isStart ? \"Start\" : \"Pause\";\n\n\n  useEffect(() => {\n    if (isStart) {\n      setTimeout(() => {\n        setTime(minute + \":\" + second)\n        setMillisecond(millisecond - props.step);\n        setSecond(Math.trunc((millisecond / 1000) % 60));\n        setMinute(Math.trunc((millisecond / 1000) / 60));\n        setWidth(millisecond * 100 / props.timeMilliseconds)\n        \n        if (millisecond < 1000) {\n          props.onTimeEnd();\n          setMillisecond(props.timeMilliseconds);\n          setStart(false);\n        }\n      }, props.step)\n    }\n  }, [isStart, millisecond, props.onTimeStart, minute, second])\n\n  useEffect(() => {\n    if (props.autostart) {\n      setStart(!isStart);\n    } \n  }, [])\n\n  useEffect(() => {\n    if (isStart) {\n      props.onTimeStart();\n    }\n  }, [isStart])\n  \n\n  return (\n    <div className=\"timer\">\n      <div className=\"timer\">\n        <h2>Timer: {minute + \":\" + second}</h2>\n        <button className=\"button start\" onClick={() => setStart(!isStart)}>{textButton}</button>\n        <div className=\"line\" style={{width: + width + \"%\"}}></div>\n       </div>\n    </div>\n  )\n}\n\nexport default Timer;\n","import Timer from './components/Timer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer timeMilliseconds={6000} autostart={false} step={1000} onTick={(time) => console.log(\"Залишилось часу: \" + time) } onTimeEnd={() => console.log(\"Час вийшов!\")} onTimeStart={() => console.log(\"Таймер запущено!\")} />\n      <Timer timeMilliseconds={600000} autostart={true} step={2000} onTick={(time) => console.log(\"Залишилось часу: \" + time)} onTimeEnd={() => console.log(\"Час вийшов!\")} onTimeStart={() => console.log(\"Таймер запущено!\")} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}